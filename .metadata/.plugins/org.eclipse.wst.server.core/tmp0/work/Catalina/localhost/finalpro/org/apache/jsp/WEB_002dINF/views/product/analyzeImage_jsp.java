/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-04-13 06:37:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class analyzeImage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1708193184989L));
    _jspx_dependants.put("jar:file:/C:/Users/lyj/finally_workSpace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/finalpro/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Image Color Picker</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("        img {\r\n");
      out.write("            max-width: 100%; /* 이미지가 페이지 너비를 초과하지 않도록 설정 */\r\n");
      out.write("        }\r\n");
      out.write("        #magnifier {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            border: 1px solid #000;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            width: 60px; /* 돋보기의 지름 */\r\n");
      out.write("            height: 60px;\r\n");
      out.write("            pointer-events: none; /* 마우스 이벤트가 돋보기를 통과하도록 설정 */\r\n");
      out.write("        }\r\n");
      out.write("        #color-send {\r\n");
      out.write("            position: relative;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        #select-color {\r\n");
      out.write("            width: 100px;\r\n");
      out.write("            height: 100px;\r\n");
      out.write("            border: 1px solid #000;\r\n");
      out.write("        }\r\n");
      out.write("		.frequency li:hover {\r\n");
      out.write("		    border: 2px solid #000; \r\n");
      out.write("		    border-radius: 5px; \r\n");
      out.write("		    cursor: pointer;\r\n");
      out.write("		}\r\n");
      out.write("		li {\r\n");
      out.write("		    width: 220px;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.buttons {\r\n");
      out.write("		    margin-top: 10px; \r\n");
      out.write("		    margin-bottom: 50px;\r\n");
      out.write("		    display: inline-block; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.image-and-buttons {\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    flex-direction: column;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.buttons button {\r\n");
      out.write("		    background-color: #fffff; \r\n");
      out.write("		    color: #666666; \r\n");
      out.write("		    padding: 10px 24px; \r\n");
      out.write("		    margin: 4px 2px; \r\n");
      out.write("		    border: none; \r\n");
      out.write("		    border-radius: 4px; \r\n");
      out.write("		    cursor: pointer;\r\n");
      out.write("		    transition-duration: 0.4s; \r\n");
      out.write("		    font-size: 16px; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.buttons button:hover {\r\n");
      out.write("		    background-color: #cccccc; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.buttons button:disabled {\r\n");
      out.write("		    background-color: #007bff; \r\n");
      out.write("		    color: white; \r\n");
      out.write("		    cursor: not-allowed; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.submit-button {\r\n");
      out.write("		    background-color: #fffff; \r\n");
      out.write("		    color: #666666; \r\n");
      out.write("		    padding: 12px 20px; \r\n");
      out.write("		    border: none; \r\n");
      out.write("		    border-radius: 4px; \r\n");
      out.write("		    cursor: pointer; \r\n");
      out.write("		    margin-top: 20px;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.submit-button:hover {\r\n");
      out.write("		    background-color: #cccccc; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("        \r\n");
      out.write("    </style>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    	function modChange(mod) {\r\n");
      out.write("				let frequencyDiv = document.querySelectorAll(\".frequency\");\r\n");
      out.write("				let magnifierDiv = document.querySelectorAll(\".magnifier\");\r\n");
      out.write("				let frequencyBtn = document.querySelector(\"#frequency-btn\");\r\n");
      out.write("				let magnifierBtn = document.querySelector(\"#magnifier-btn\");\r\n");
      out.write("			if(mod==\"frequency\"){\r\n");
      out.write("				magnifierDiv.forEach(function(element) {\r\n");
      out.write("				    element.style.display = \"none\";\r\n");
      out.write("				});\r\n");
      out.write("				frequencyDiv.forEach(function(element) {\r\n");
      out.write("					element.style.display=\"\";\r\n");
      out.write("				});\r\n");
      out.write("				frequencyBtn.disabled = true;\r\n");
      out.write("				magnifierBtn.disabled = false;\r\n");
      out.write("			}else if(mod==\"magnifier\"){\r\n");
      out.write("				frequencyDiv.forEach(function(element) {\r\n");
      out.write("				    element.style.display = \"none\";\r\n");
      out.write("				});\r\n");
      out.write("				magnifierDiv.forEach(function(element) {\r\n");
      out.write("					element.style.display=\"\";\r\n");
      out.write("				});\r\n");
      out.write("				magnifierBtn.disabled = true;\r\n");
      out.write("				frequencyBtn.disabled = false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("    	\r\n");
      out.write("    	function goSearchList(keyword) {\r\n");
      out.write("    		keyword = keyword.slice(1); // \"World\"\r\n");
      out.write("    	    window.location.href = \"product/searchList.do?keyword=%23\" + keyword;\r\n");
      out.write("    	}\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("    	function goSearchList2() {\r\n");
      out.write("		    // hidden-selected-color 요소의 값 가져오기\r\n");
      out.write("		    let selectedColor = document.getElementById(\"hidden-selected-color\").value;\r\n");
      out.write("		\r\n");
      out.write("		    // 2번째 글자부터 가져오기\r\n");
      out.write("		    let substringSelectedColor = selectedColor.substring(1);\r\n");
      out.write("		\r\n");
      out.write("		    // URL에 키워드 값을 포함하여 이동\r\n");
      out.write("		    window.location.href = \"product/searchList.do?keyword=%23\" + substringSelectedColor;\r\n");
      out.write("		\r\n");
      out.write("		    // 폼 제출 막기\r\n");
      out.write("		    return false;\r\n");
      out.write("		}\r\n");
      out.write("    	\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	<div class= \"analyzeAll\">\r\n");
      out.write("	    <div class=\"image-and-buttons\">\r\n");
      out.write("	        <img id=\"imageToAnalyze\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${imageSrc}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" style=\"width: 500px; height: 557px;\">\r\n");
      out.write("	        <div class=\"buttons\">\r\n");
      out.write("	            <button id=\"frequency-btn\" onclick=\"modChange(this.value)\" value=\"frequency\" disabled=\"disabled\">목록보기</button>\r\n");
      out.write("	            <button id=\"magnifier-btn\" onclick=\"modChange(this.value)\" value=\"magnifier\">직접찾기</button>\r\n");
      out.write("	        </div>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    \r\n");
      out.write("	    <div class=\"frequency\">\r\n");
      out.write("			<h3>Top Colors</h3>\r\n");
      out.write("			<ul>\r\n");
      out.write("			    ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	    \r\n");
      out.write("	    <canvas class=\"magnifier\" id=\"magnifier\" style=\"display: none;\"></canvas>\r\n");
      out.write("	    \r\n");
      out.write("	   <div class=\"magnifier\" id=\"color-send\" style=\"display: none;\">\r\n");
      out.write("		    <div id=\"select-color\"></div>\r\n");
      out.write("		    <form action=\"\" onsubmit=\"return goSearchList2()\">\r\n");
      out.write("		        <input type=\"hidden\" id=\"hidden-selected-color\">\r\n");
      out.write("		        <input type=\"submit\" value=\"이 색깔로 검색하기\" class=\"submit-button\">\r\n");
      out.write("		    </form>\r\n");
      out.write("		</div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("        const img = document.getElementById('imageToAnalyze');\r\n");
      out.write("        const magnifier = document.querySelector('#magnifier');\r\n");
      out.write("        const canvas = document.createElement('canvas');\r\n");
      out.write("        const context = canvas.getContext('2d');\r\n");
      out.write("        \r\n");
      out.write("        const selectColor = document.getElementById('select-color');\r\n");
      out.write("        const hiddenSelectColor = document.getElementById('hidden-selected-color');\r\n");
      out.write("\r\n");
      out.write("        // 이미지 로드를 확인하고, canvas에 그리기\r\n");
      out.write("        img.onload = function() {\r\n");
      out.write("            canvas.width = img.naturalWidth;\r\n");
      out.write("            canvas.height = img.naturalHeight;\r\n");
      out.write("            context.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        // 이미지가 이미 로드된 경우에 대비하여 수동으로 onload 이벤트 트리거\r\n");
      out.write("        if (img.complete) {\r\n");
      out.write("            img.onload();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        document.addEventListener('mousemove', function(e) {\r\n");
      out.write("            if (e.target === img) {\r\n");
      out.write("                const bounds = img.getBoundingClientRect();\r\n");
      out.write("                const x = Math.floor((e.clientX - bounds.left) * (img.naturalWidth / bounds.width));\r\n");
      out.write("                const y = Math.floor((e.clientY - bounds.top) * (img.naturalHeight / bounds.height));\r\n");
      out.write("                const pixel = context.getImageData(x, y, 1, 1).data;\r\n");
      out.write("                const color = 'rgba('+pixel[0]+','+ pixel[1]+','+pixel[2]+','+(pixel[3] / 255)+')';\r\n");
      out.write("\r\n");
      out.write("                magnifier.style.left = e.pageX + 15 + 'px'; // 돋보기 위치 조정\r\n");
      out.write("                magnifier.style.top = e.pageY + 10 + 'px';\r\n");
      out.write("                magnifier.style.background = color;\r\n");
      out.write("            }\r\n");
      out.write("		});\r\n");
      out.write("        \r\n");
      out.write("        document.addEventListener('click', function(e) {\r\n");
      out.write("            if (e.target === img) {\r\n");
      out.write("                selectColor.style.background = magnifier.style.background;\r\n");
      out.write("                hiddenSelectColor.value = backgroundColorToHex(magnifier.style.background);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("	});\r\n");
      out.write("    \r\n");
      out.write("    function backgroundColorToHex(backgroundColor) {\r\n");
      out.write("        // 백그라운드 컬러를 RGB 값으로 추출\r\n");
      out.write("        var rgbArray = backgroundColor.match(/\\d+/g);\r\n");
      out.write("\r\n");
      out.write("        // RGB 값을 각각 추출\r\n");
      out.write("        var r = parseInt(rgbArray[0]);\r\n");
      out.write("        var g = parseInt(rgbArray[1]);\r\n");
      out.write("        var b = parseInt(rgbArray[2]);\r\n");
      out.write("\r\n");
      out.write("        // RGB 값을 Hex 색상으로 변환하여 반환\r\n");
      out.write("        return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n");
      out.write("    }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/product/analyzeImage.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/product/analyzeImage.jsp(4,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/product/analyzeImage.jsp(4,0) '#{pageContext.request.contextPath }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{pageContext.request.contextPath }",java.lang.Object.class)));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/product/analyzeImage.jsp(157,7) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("entry");
      // /WEB-INF/views/product/analyzeImage.jsp(157,7) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/product/analyzeImage.jsp(157,7) '${colorFrequencyMap}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${colorFrequencyMap}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("			        <li onclick=\"goSearchList(this.getAttribute('value'))\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.key}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("			        	<span style=\"background:");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.key}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(";width:20px;height:20px;display:inline-block;\"></span> \r\n");
            out.write("			        	<span>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.key}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(' ');
            out.write('-');
            out.write(' ');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(" times</span>\r\n");
            out.write("			        </li>\r\n");
            out.write("			    ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
