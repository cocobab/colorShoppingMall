/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-04-25 18:07:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.brand;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class brandList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getInstance();
  _jspx_fnmap_0.mapFunction("fn:length", org.apache.taglibs.standard.functions.Functions.class, "length", new Class[] {java.lang.Object.class});
  _jspx_fnmap_0.mapFunction("fn:substring", org.apache.taglibs.standard.functions.Functions.class, "substring", new Class[] {java.lang.String.class, int.class, int.class});
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/Users/lyj/finally_workSpace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/finalpro/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1708193184989L));
    _jspx_dependants.put("jar:file:/C:/Users/lyj/finally_workSpace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/finalpro/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/lyj/finally_workSpace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/finalpro/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvar_005fvalue_005fpattern_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvar_005fvalue_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvar_005fvalue_005fpattern_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:length(brandAllProduct.brand) > 8 ? fn:substring(brandAllProduct.brand, 0, 8) + \"...\" : brandAllProduct.brand}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</p>\r\n");
      out.write("<h3>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:length(brandAllProduct.name) > 8 ? fn:substring(brandAllProduct.name, 0, 8) + \"...\" : brandAllProduct.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</h3>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/finalpro/resources/css/brand.css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f1(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f2(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f3(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 대분류에서 카테고리를 선택하면 해당 중분류 카테고리 나오게 하기 -->\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("let selectedCategory = null;\r\n");
      out.write("let selectedSubCategory = null;\r\n");
      out.write("let selectedColors = []; // 색상을 저장할 배열\r\n");
      out.write("let selectedMinPrice = null;\r\n");
      out.write("let selectedMaxPrice = null;\r\n");
      out.write("let selectedCategoryName = '';\r\n");
      out.write("let selectedSubCategoryName = '';\r\n");
      out.write("let selectedPriceRangeName = '';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//대분류 선택 시 중분류 선택 영역을 표시하고, 상품을 필터링하는 함수\r\n");
      out.write("function showCategory(category, categoryName) {\r\n");
      out.write("	if (category === 'all') {\r\n");
      out.write("        // \"전체\"를 클릭한 경우 모든 조건을 초기화합니다.\r\n");
      out.write("        selectedCategory = null;\r\n");
      out.write("        selectedSubCategory = null;\r\n");
      out.write("        selectedColors = []; // 색상 선택 배열을 초기화합니다.\r\n");
      out.write("        selectedCategoryName = ''; // 카테고리 이름 초기화\r\n");
      out.write("        selectedSubCategoryName = ''; // 중분류 이름 초기화 추가\r\n");
      out.write("        \r\n");
      out.write("        // 만약 선택 링크 또는 버튼을 사용하는 경우\r\n");
      out.write("        document.querySelectorAll('.color_tap_link').forEach(colorSelection => {\r\n");
      out.write("            colorSelection.classList.remove('selected'); // 'selected' 클래스 제거\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 모든 상품을 표시하고, 중분류 선택 영역을 숨깁니다.\r\n");
      out.write("        const allProducts = document.querySelectorAll('.allItemInfo');\r\n");
      out.write("        allProducts.forEach(product => {\r\n");
      out.write("            product.style.display = 'block';\r\n");
      out.write("            product.classList.add('filtered-visible'); // 이 부분을 추가\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const categories = document.querySelectorAll('.sub_outer_category, .sub_top_category, .sub_pants_category, .sub_shoes_category');\r\n");
      out.write("        categories.forEach(cat => cat.style.display = 'none');\r\n");
      out.write("\r\n");
      out.write("        updatePagination(); // 페이지네이션 업데이트 호출을 여기에 추가합니다.\r\n");
      out.write("    } else if (selectedCategory === category) {\r\n");
      out.write("        // 이미 선택된 대분류를 다시 클릭한 경우, 서브카테고리와 색상 필터를 초기화합니다.\r\n");
      out.write("        selectedSubCategory = null;\r\n");
      out.write("        selectedColor = null;\r\n");
      out.write("        // 대분류에 해당하는 상품만 다시 필터링하여 표시합니다.\r\n");
      out.write("        filterProducts();\r\n");
      out.write("    } else {\r\n");
      out.write("        // 다른 대분류를 선택한 경우\r\n");
      out.write("        selectedCategory = category;\r\n");
      out.write("        selectedSubCategory = null;\r\n");
      out.write("        selectedColor = null;\r\n");
      out.write("        selectedCategoryName = categoryName; // 카테고리의 실제 이름 저장\r\n");
      out.write("        // 중분류 선택 영역을 숨기고, 선택된 대분류에 따라 해당 중분류 영역을 표시합니다.\r\n");
      out.write("        const categories = document.querySelectorAll('.sub_outer_category, .sub_top_category, .sub_pants_category, .sub_shoes_category');\r\n");
      out.write("        categories.forEach(cat => cat.style.display = 'none');\r\n");
      out.write("\r\n");
      out.write("        const subCategoryDivId = 'sub_' + category + '_category';\r\n");
      out.write("        const subCategoryDiv = document.getElementById(subCategoryDivId);\r\n");
      out.write("        if (subCategoryDiv) subCategoryDiv.style.display = 'block';\r\n");
      out.write("        \r\n");
      out.write("        filterProducts(); // 상품 필터링 함수 호출\r\n");
      out.write("    }\r\n");
      out.write("    updateUserSelectionDisplay(); // 사용자 선택 표시를 업데이트\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function filterProducts() {\r\n");
      out.write("    const allProducts = document.querySelectorAll('.allItemInfo');\r\n");
      out.write("    allProducts.forEach(product => {\r\n");
      out.write("        const productCategory = product.getAttribute('data-category');\r\n");
      out.write("        const productSubCategory = product.getAttribute('data-subcategory');\r\n");
      out.write("        const productColorHex = product.getAttribute('data-color1');\r\n");
      out.write("        const productPrice = parseInt(product.getAttribute('data-price'), 10);\r\n");
      out.write("        const productColor = hexToRgb(productColorHex);\r\n");
      out.write("\r\n");
      out.write("        // 가격 범위 필터\r\n");
      out.write("        const isPriceInRange = (!selectedMinPrice || productPrice >= selectedMinPrice) && (!selectedMaxPrice || productPrice <= selectedMaxPrice);\r\n");
      out.write("        \r\n");
      out.write("        // 색상 필터\r\n");
      out.write("        const isColorMatched = selectedColors.length === 0 || selectedColors.some(selectedHex => {\r\n");
      out.write("            const {r, g, b} = hexToRgb(selectedHex);\r\n");
      out.write("            const distance = Math.sqrt(Math.pow(r - productColor.r, 2) + Math.pow(g - productColor.g, 2) + Math.pow(b - productColor.b, 2));\r\n");
      out.write("            return distance <= 60;\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        if ((selectedCategory && productCategory !== selectedCategory) ||\r\n");
      out.write("            (selectedSubCategory && productSubCategory !== selectedSubCategory) ||\r\n");
      out.write("            !isColorMatched ||\r\n");
      out.write("            !isPriceInRange) {\r\n");
      out.write("            product.style.display = 'none';\r\n");
      out.write("            product.classList.remove('filtered-visible');\r\n");
      out.write("        } else {\r\n");
      out.write("            product.style.display = 'block';\r\n");
      out.write("            product.classList.add('filtered-visible');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("    updatePagination();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 중분류 상품 나오게 하기\r\n");
      out.write("function showSubCategory(subCategory, subCategoryName) {\r\n");
      out.write("    // 이미 선택된 서브카테고리를 한 번 더 클릭한 경우 조건을 삭제합니다.\r\n");
      out.write("    if (selectedSubCategory === subCategory) {\r\n");
      out.write("        selectedSubCategory = null; // 서브카테고리 선택 초기화\r\n");
      out.write("        selectedSubCategoryName = ''; // 중분류 이름 초기화\r\n");
      out.write("    } else {\r\n");
      out.write("        selectedSubCategory = subCategory; // 새로운 서브카테고리 선택 업데이트\r\n");
      out.write("        selectedSubCategoryName = subCategoryName; // 중분류 실제 이름 저장\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    filterProducts(); // 상품 필터링 함수 호출\r\n");
      out.write("    updateUserSelectionDisplay(); // 이 줄을 추가\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 색상 유클리디안 거리 30 이하인 값의 상품만 나오게 하기\r\n");
      out.write("function hexToRgb(hex) {\r\n");
      out.write("    let r = 0, g = 0, b = 0;\r\n");
      out.write("    // 3자리 hex 코드인 경우 (#RGB => #RRGGBB)\r\n");
      out.write("    if (hex.length === 4) {\r\n");
      out.write("        r = parseInt(hex[1] + hex[1], 16);\r\n");
      out.write("        g = parseInt(hex[2] + hex[2], 16);\r\n");
      out.write("        b = parseInt(hex[3] + hex[3], 16);\r\n");
      out.write("    }\r\n");
      out.write("    // 6자리 hex 코드인 경우\r\n");
      out.write("    else if (hex.length === 7) {\r\n");
      out.write("        r = parseInt(hex.substring(1, 3), 16);\r\n");
      out.write("        g = parseInt(hex.substring(3, 5), 16);\r\n");
      out.write("        b = parseInt(hex.substring(5, 7), 16);\r\n");
      out.write("    }\r\n");
      out.write("    return {r, g, b};\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function filterByColor(hexColor, event) {\r\n");
      out.write("    const colorLink = event.currentTarget; // 클릭된 요소를 가져옵니다\r\n");
      out.write("    const colorIndex = selectedColors.indexOf(hexColor); // 선택된 색상이 배열에 이미 있는지 확인\r\n");
      out.write("    if (colorIndex > -1) {\r\n");
      out.write("        selectedColors.splice(colorIndex, 1);\r\n");
      out.write("        colorLink.classList.remove('selected'); // 'selected' 클래스를 제거\r\n");
      out.write("        if (hexColor === '#0e0e0e') { // 검정색의 경우 추가적으로 처리\r\n");
      out.write("            colorLink.classList.remove('selected-black'); // 'selected-black' 클래스를 제거\r\n");
      out.write("        }\r\n");
      out.write("    } else {\r\n");
      out.write("        selectedColors.push(hexColor);\r\n");
      out.write("        colorLink.classList.add('selected'); // 'selected' 클래스를 추가\r\n");
      out.write("        if (hexColor === '#0e0e0e') { // 검정색의 경우 추가적으로 처리\r\n");
      out.write("            colorLink.classList.add('selected-black'); // 'selected-black' 클래스를 추가\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    filterProducts(); // 새로운 선택에 기반하여 상품 필터링\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 가격 설정\r\n");
      out.write("function showPriceRange(minPrice, maxPrice, priceRangeName) {\r\n");
      out.write("    // 이미 선택된 가격 범위를 다시 클릭한 경우 조건을 삭제합니다.\r\n");
      out.write("    if (selectedMinPrice === minPrice && selectedMaxPrice === maxPrice) {\r\n");
      out.write("        selectedMinPrice = null;\r\n");
      out.write("        selectedMaxPrice = null;\r\n");
      out.write("        selectedPriceRangeName = ''; // 가격 범위 이름 초기화\r\n");
      out.write("    } else {\r\n");
      out.write("        selectedMinPrice = minPrice;\r\n");
      out.write("        selectedMaxPrice = maxPrice;\r\n");
      out.write("        selectedPriceRangeName = priceRangeName; // 가격 범위 실제 이름 저장\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    filterProducts(); // 상품 목록을 업데이트합니다.\r\n");
      out.write("    updateUserSelectionDisplay(); // 이 줄을 추가\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 사용자 가격 검색\r\n");
      out.write("function applyCustomPriceRange() {\r\n");
      out.write("    // 사용자 입력을 기반으로 최소 및 최대 가격을 가져옵니다.\r\n");
      out.write("    const minPrice = document.getElementById('minPrice').value;\r\n");
      out.write("    const maxPrice = document.getElementById('maxPrice').value;\r\n");
      out.write("    \r\n");
      out.write("    // 입력 값이 없는 경우 undefined를 전달합니다.\r\n");
      out.write("    const minPriceValue = minPrice ? parseInt(minPrice, 10) : undefined;\r\n");
      out.write("    const maxPriceValue = maxPrice ? parseInt(maxPrice, 10) : undefined;\r\n");
      out.write("    \r\n");
      out.write("    // 가격 범위를 적용합니다.\r\n");
      out.write("    showPriceRange(minPriceValue, maxPriceValue);\r\n");
      out.write("    updateUserSelectionDisplay(); // 이 줄을 추가\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//사용자 선택 표시를 업데이트하는 함수\r\n");
      out.write("// 사용자 선택 표시를 업데이트하는 함수\r\n");
      out.write("function updateUserSelectionDisplay() {\r\n");
      out.write("    const display = document.getElementById('userSelectionDisplay');\r\n");
      out.write("    display.innerHTML = ''; // 기존에 표시된 모든 선택 항목을 초기화\r\n");
      out.write("\r\n");
      out.write("    // 선택된 대분류, 중분류, 가격 범위에 대한 버튼 생성 및 추가\r\n");
      out.write("    if (selectedCategoryName) {\r\n");
      out.write("        display.appendChild(createSelectionButton(selectedCategoryName, 'category'));\r\n");
      out.write("    }\r\n");
      out.write("    if (selectedSubCategoryName) {\r\n");
      out.write("        display.appendChild(createSelectionButton(selectedSubCategoryName, 'subCategory'));\r\n");
      out.write("    }\r\n");
      out.write("    if (selectedPriceRangeName) {\r\n");
      out.write("        display.appendChild(createSelectionButton(selectedPriceRangeName, 'price'));\r\n");
      out.write("    }\r\n");
      out.write("    // 나머지 로직 유지\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//선택한 항목에 대한 버튼을 생성하는 함수\r\n");
      out.write("function createSelectionButton(text, type) {\r\n");
      out.write("    const button = document.createElement('button');\r\n");
      out.write("    button.textContent = text + \" (x)\";\r\n");
      out.write("    \r\n");
      out.write("    // 버튼에 스타일 추가\r\n");
      out.write("    //button.style.backgroundColor = '#007bff'; // 배경색\r\n");
      out.write("    button.style.color = 'black'; // 텍스트 색상\r\n");
      out.write("    button.style.backgroundColor = '#ffffff';\r\n");
      out.write("    button.style.padding = '5px 10px'; // 안쪽 여백\r\n");
      out.write("    // button.style.border = 'none'; // 테두리 없음\r\n");
      out.write("    button.style.borderRadius = '5px'; // 모서리 둥글게\r\n");
      out.write("    button.style.marginRight = '5px'; // 오른쪽 마진\r\n");
      out.write("    \r\n");
      out.write("    button.onclick = function() {\r\n");
      out.write("        if (type === 'category') {\r\n");
      out.write("            selectedCategory = null;\r\n");
      out.write("            selectedCategoryName = '';\r\n");
      out.write("        } else if (type === 'subCategory') {\r\n");
      out.write("            selectedSubCategory = null;\r\n");
      out.write("            selectedSubCategoryName = '';\r\n");
      out.write("        } else if (type === 'price') {\r\n");
      out.write("            selectedMinPrice = null;\r\n");
      out.write("            selectedMaxPrice = null;\r\n");
      out.write("            selectedPriceRangeName = '';\r\n");
      out.write("        }\r\n");
      out.write("        filterProducts();\r\n");
      out.write("        updateUserSelectionDisplay();\r\n");
      out.write("    };\r\n");
      out.write("    return button;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 상품 정렬 버튼\r\n");
      out.write("function sortItems(sortBy, button) {\r\n");
      out.write("  var items = document.querySelectorAll('.allItemInfo');\r\n");
      out.write("  var itemsArr = Array.from(items);\r\n");
      out.write("\r\n");
      out.write("  var sortFunctions = {\r\n");
      out.write("    'highToLow': function(a, b) { return parseInt(b.dataset.price) - parseInt(a.dataset.price); },\r\n");
      out.write("    'lowToHigh': function(a, b) { return parseInt(a.dataset.price) - parseInt(b.dataset.price); },\r\n");
      out.write("    'reviews': function(a, b) { return parseInt(b.dataset.reviewcount) - parseInt(a.dataset.reviewcount); },\r\n");
      out.write("    'starScore': function(a, b) { return parseInt(b.dataset.starscore) - parseInt(a.dataset.starscore); } // 새로운 정렬 함수 추가\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  var sortedItems = itemsArr.sort(sortFunctions[sortBy]);\r\n");
      out.write("\r\n");
      out.write("  var parent = document.querySelector('.productsGrid');\r\n");
      out.write("  parent.innerHTML = \"\"; // 컨테이너 비우기\r\n");
      out.write("\r\n");
      out.write("  sortedItems.forEach(function(item) {\r\n");
      out.write("    parent.appendChild(item); // 정렬된 항목을 다시 컨테이너에 추가\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  //updateItemsDisplay();\r\n");
      out.write("\r\n");
      out.write("  // 버튼 외관 업데이트를 위한 새 코드:\r\n");
      out.write("  var buttons = document.querySelectorAll('.sorter_button');\r\n");
      out.write("  buttons.forEach(function(btn) {\r\n");
      out.write("    btn.classList.remove('active_sort_button'); // 모든 버튼에서 활성 클래스 제거\r\n");
      out.write("  });\r\n");
      out.write("  button.classList.add('active_sort_button'); // 클릭된 버튼에 활성 클래스 추가\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 페이지 버튼 스타일링\r\n");
      out.write("function applyButtonStyle(button) {\r\n");
      out.write("    button.style.backgroundColor = '#ffffff'; // 배경색을 옅은 회색으로 설정\r\n");
      out.write("    button.style.padding = '10px 15px'; // 패딩을 적용하여 버튼 크기 조정\r\n");
      out.write("    button.style.margin = '5px'; // 버튼 사이의 간격 조정\r\n");
      out.write("    button.style.borderRadius = '5px'; // 버튼 모서리 둥글게\r\n");
      out.write("    button.style.cursor = 'pointer'; // 마우스 오버 시 커서 변경\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//페이지네이션 생성 및 업데이트 함수\r\n");
      out.write("function updatePagination() {\r\n");
      out.write("    const itemsPerPage = 20;\r\n");
      out.write("    const allVisibleItems = document.querySelectorAll('.allItemInfo:not([style*=\"display: none\"])');\r\n");
      out.write("    const pageCount = Math.ceil(allVisibleItems.length / itemsPerPage);\r\n");
      out.write("\r\n");
      out.write("    const paginationDiv = document.querySelector('.pagination');\r\n");
      out.write("    paginationDiv.innerHTML = '';\r\n");
      out.write("\r\n");
      out.write("    const firstPageButton = document.createElement('button');\r\n");
      out.write("    firstPageButton.innerText = \"<<\";\r\n");
      out.write("    firstPageButton.onclick = function() { showPage(1); };\r\n");
      out.write("    applyButtonStyle(firstPageButton); // 버튼 스타일 적용\r\n");
      out.write("    paginationDiv.appendChild(firstPageButton);\r\n");
      out.write("\r\n");
      out.write("    for (let i = 1; i <= pageCount; i++) {\r\n");
      out.write("        const pageButton = document.createElement('button');\r\n");
      out.write("        pageButton.innerText = i;\r\n");
      out.write("        pageButton.onclick = function() { showPage(i); };\r\n");
      out.write("        applyButtonStyle(pageButton); // 버튼 스타일 적용\r\n");
      out.write("        paginationDiv.appendChild(pageButton);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const lastPageButton = document.createElement('button');\r\n");
      out.write("    lastPageButton.innerText = \">>\";\r\n");
      out.write("    lastPageButton.onclick = function() { showPage(pageCount); };\r\n");
      out.write("    applyButtonStyle(lastPageButton); // 버튼 스타일 적용\r\n");
      out.write("    paginationDiv.appendChild(lastPageButton);\r\n");
      out.write("\r\n");
      out.write("    if (pageCount > 0) {\r\n");
      out.write("        showPage(1);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("let currentPage = 1; // 현재 페이지 번호를 추적하는 글로벌 변수\r\n");
      out.write("\r\n");
      out.write("//지정된 페이지의 상품만 보이도록 하는 함수\r\n");
      out.write("function showPage(pageNumber) {\r\n");
      out.write("    currentPage = pageNumber; // 현재 페이지 번호 업데이트\r\n");
      out.write("    const itemsPerPage = 20;\r\n");
      out.write("    const filteredVisibleItems = document.querySelectorAll('.allItemInfo.filtered-visible');\r\n");
      out.write("\r\n");
      out.write("    document.querySelectorAll('.allItemInfo').forEach(item => {\r\n");
      out.write("        item.style.display = 'none';\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    const start = (pageNumber - 1) * itemsPerPage;\r\n");
      out.write("    const end = start + itemsPerPage;\r\n");
      out.write("    for (let i = start; i < end && i < filteredVisibleItems.length; i++) {\r\n");
      out.write("        filteredVisibleItems[i].style.display = 'block';\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 페이지 버튼의 스타일을 업데이트합니다.\r\n");
      out.write("    updatePaginationStyles();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updatePaginationStyles() {\r\n");
      out.write("    const paginationDiv = document.querySelector('.pagination');\r\n");
      out.write("    const buttons = paginationDiv.querySelectorAll('button');\r\n");
      out.write("    buttons.forEach(button => {\r\n");
      out.write("        applyButtonStyle(button); // 모든 버튼에 기본 스타일 적용\r\n");
      out.write("        if (parseInt(button.innerText) === currentPage) {\r\n");
      out.write("            button.style.backgroundColor = '#d3d3d3'; // 현재 페이지 버튼에만 회색 배경 적용\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    // 페이지 로딩 시 모든 상품에 filtered-visible 클래스를 추가하여 초기화합니다.\r\n");
      out.write("    const allProducts = document.querySelectorAll('.allItemInfo');\r\n");
      out.write("    allProducts.forEach(product => {\r\n");
      out.write("        product.classList.add('filtered-visible'); // 초기 상태에서 모든 상품에 클래스 추가\r\n");
      out.write("        product.style.display = 'block'; // 모든 상품을 보이게 합니다.\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    updatePagination(); // 초기 페이지네이션 업데이트\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("   <div class=\"brand_banner\">\r\n");
      out.write("   	<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/brand/brandList.do?brand=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandProduct[0].brand}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("   		<img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/download.do?imageFileName=2.jpg&productNo=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandImage[0].brand}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&path=brand\" id=\"preview\">\r\n");
      out.write("   	</a>\r\n");
      out.write("   </div>\r\n");
      out.write("   <div class=\"brand_banner_detail\">\r\n");
      out.write("   		<img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/download.do?imageFileName=1.jpg&productNo=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandImage[0].brand}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&path=brand\" id=\"preview\">\r\n");
      out.write("   		<span>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandImage[0].introduce}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   <!-- 조건 선택 창 -->\r\n");
      out.write("   <div class=\"category_select_box\">\r\n");
      out.write("	   <div class=\"major_category\">\r\n");
      out.write("	   		<p class=\"major_title\">대분류</p>\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\" onclick=\"showCategory('all')\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			<dd>\r\n");
      out.write("	   				<ul class = \"division_reset\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"major_tap_link\" data-value=\"outer\" onclick=\"showCategory('outer', '아우터')\">아우터<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"major_tap_link\" data-value=\"top\" onclick=\"showCategory('top', '상의')\">상의<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"major_tap_link\" data-value=\"pants\" onclick=\"showCategory('pants', '하의')\">하의<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"major_tap_link\" data-value=\"shoes\" onclick=\"showCategory('shoes', '신발')\">신발<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   			\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   <div class=\"sub_outer_category\" id=\"sub_outer_category\" style=\"display:none;\">\r\n");
      out.write("	   		<p class=\"sub_title\">중분류</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\" onclick=\"showSubCategory(null, '전체')\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			<dd>\r\n");
      out.write("	   				<ul class = \"sub_outer\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"jumper\" onclick=\"showSubCategory('jumper', '자켓')\">자켓<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"coat\" onclick=\"showSubCategory('coat', '코트')\">코트<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"heavyOuter\" onclick=\"showSubCategory('heavyOuter', '패딩')\">패딩<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"cardigan\" onclick=\"showSubCategory('cardigan', '가디건')\">가디건<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"fleece\" onclick=\"showSubCategory('fleece', '후리스')\">후리스<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   			\r\n");
      out.write("	   			\r\n");
      out.write("	   			\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   <div class=\"sub_top_category\" id=\"sub_top_category\" style=\"display:none;\">\r\n");
      out.write("	   		<p class=\"sub_title\">중분류</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			 <dd>\r\n");
      out.write("	   				<ul class = \"sub_top\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"mtom\" onclick=\"showSubCategory('mtom', '맨투맨')\">맨투맨<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"hood\" onclick=\"showSubCategory('hood', '후드티')\">후드티<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"t-shirt\" onclick=\"showSubCategory('t-shirt', '티셔츠')\">티셔츠<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"knit\" onclick=\"showSubCategory('knit', '니트')\">니트<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_outer_tap_link\" data-value=\"shirt\" onclick=\"showSubCategory('shirt', '셔츠')\">셔츠<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   <div class=\"sub_pants_category\" id=\"sub_pants_category\" style=\"display:none;\">\r\n");
      out.write("	   		<p class=\"sub_title\">중분류</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			 <dd>\r\n");
      out.write("	   				<ul class = \"sub_pants\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"jeans\" onclick=\"showSubCategory('jeans', '청바지')\">청바지<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"slacks\" onclick=\"showSubCategory('slacks', '슬렉스')\">슬렉스<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"skirt\" onclick=\"showSubCategory('skirt', '치마')\">치마<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"trackPants\" onclick=\"showSubCategory('trackPants', '츄리닝')\">츄리닝<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"shorts\" onclick=\"showSubCategory('shorts', '반바지')\">반바지<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   <div class=\"sub_shoes_category\" id=\"sub_shoes_category\" style=\"display:none;\">\r\n");
      out.write("	   		<p class=\"sub_title\">중분류</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			 <dd>\r\n");
      out.write("	   				<ul class = \"sub_shoes\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"dressShoes\" onclick=\"showSubCategory('dressShoes', '구두')\">구두<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"slippers\" onclick=\"showSubCategory('slippers', '슬리퍼')\">슬리퍼<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" data-value=\"sneakers\" onclick=\"showSubCategory('sneakers', '스니커즈')\">스니커즈<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   <div class=\"selectColor\" id=\"selectColor\">\r\n");
      out.write("	   		<p class=\"sub_title\">색상</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_color\">\r\n");
      out.write("	   			 <dd>\r\n");
      out.write("	   				<ul class = \"color_tab\">\r\n");
      out.write("	   					<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#0e0e0e\" onclick=\"filterByColor('#0e0e0e', event)\" style=\"background-color: #0e0e0e;\" title=\"블랙\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#d9d9d7\" onclick=\"filterByColor('#d9d9d7', event)\" style=\"background-color: #d9d9d7;\" title=\"라이트 그레이\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#9c9c9b\" onclick=\"filterByColor('#9c9c9b', event)\" style=\"background-color: #9c9c9b;\" title=\"그레이\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#d5313c\" onclick=\"filterByColor('#d5313c', event)\" style=\"background-color: #d5313c;\" title=\"레드\"></a></li>\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#feffed\" onclick=\"filterByColor('#feffed', event)\" style=\"background-color: #feffed;\" title=\"아이보리\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#ffffff\" onclick=\"filterByColor('#ffffff', event)\" style=\"background-color: #ffffff;\" title=\"화이트\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#52565b\" onclick=\"filterByColor('#52565b', event)\" style=\"background-color: #52565b;\" title=\"다크 그레이\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#28438a\" onclick=\"filterByColor('#28438a', event)\" style=\"background-color: #28438a;\" title=\"블루\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#54996a\" onclick=\"filterByColor('#54996a', event)\" style=\"background-color: #54996a;\" title=\"라이트 그린\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#f1c276\" onclick=\"filterByColor('#f1c276', event)\" style=\"background-color: #f1c276;\" title=\"베이지\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#00c3eb\" onclick=\"filterByColor('#00c3eb', event)\" style=\"background-color: #00c3eb;\" title=\"스카이 블루\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#5b5a35\" onclick=\"filterByColor('#5b5a35', event)\" style=\"background-color: #5b5a35;\" title=\"카키\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#03431d\" onclick=\"filterByColor('#03431d', event)\" style=\"background-color: #03431d;\" title=\"다크 그린\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#7f290c\" onclick=\"filterByColor('#7f290c', event)\" style=\"background-color: #7f290c;\" title=\"브라운\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#00c4ab\" onclick=\"filterByColor('#00c4ab', event)\" style=\"background-color: #00c4ab;\" title=\"민트\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#ff00a1\" onclick=\"filterByColor('#ff00a1', event)\" style=\"background-color: #ff00a1;\" title=\"핑크\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#ceb390\" onclick=\"filterByColor('#ceb390', event)\" style=\"background-color: #ceb390;\" title=\"샌드\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#ff9db5\" onclick=\"filterByColor('#ff9db5', event)\" style=\"background-color: #ff9db5;\" title=\"라이트 핑크\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#b077cf\" onclick=\"filterByColor('#b077cf', event)\" style=\"background-color: #b077cf;\" title=\"라벤더\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#77872e\" onclick=\"filterByColor('#77872e', event)\" style=\"background-color: #77872e;\" title=\"올리브 그린\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#fdbb33\" onclick=\"filterByColor('#fdbb33', event)\" style=\"background-color: #fdbb33;\" title=\"옐로우\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#e8a399\" onclick=\"filterByColor('#e8a399', event)\" style=\"background-color: #e8a399;\" title=\"페일 핑크\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#e49700\" onclick=\"filterByColor('#e49700', event)\" style=\"background-color: #e49700;\" title=\"오렌지\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#ad0a32\" onclick=\"filterByColor('#ad0a32', event)\" style=\"background-color: #ad0a32;\" title=\"버건디\"></a></li>\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#aa7200\" onclick=\"filterByColor('#aa7200', event)\" style=\"background-color: #aa7200;\" title=\"카키 베이지\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#b9cee0\" onclick=\"filterByColor('#b9cee0', event)\" style=\"background-color: #b9cee0;\" title=\"라이트 블루\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#570070\" onclick=\"filterByColor('#570070', event)\" style=\"background-color: #570070;\" title=\"퍼플\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#b9b018\" onclick=\"filterByColor('#b9b018', event)\" style=\"background-color: #b9b018;\" title=\"머스타드\"></a></li>\r\n");
      out.write("						\r\n");
      out.write("						<li><a href=\"javascript:void(0)\" class=\"color_tap_link\" data-value=\"#8b9fbb\" onclick=\"filterByColor('#8b9fbb', event)\" style=\"background-color: #8b9fbb;\" title=\"미디엄 블루\"></a></li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   </div>	\r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   <!-- 가격 -->\r\n");
      out.write("	   <div class=\"selectPrice\" id=\"selectPrice\" >\r\n");
      out.write("	   		<p class=\"sub_title\">가격</p>\r\n");
      out.write("	   		\r\n");
      out.write("	   		<dl class=\"list_division_brand\">\r\n");
      out.write("	   			<dt>\r\n");
      out.write("	   				<div>\r\n");
      out.write("	   					<a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(undefined, undefined, '전체')\">전체</a>\r\n");
      out.write("	   				</div>\r\n");
      out.write("	   			</dt>\r\n");
      out.write("	   			 <dd>\r\n");
      out.write("	   				<ul class = \"sub_price\">\r\n");
      out.write("	   					<li class=\"price_selection\"><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(undefined, 50000, '5만원 이하')\">5만원 이하<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li class=\"price_selection\"><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(50000, 100000, '5만원~10만원')\">5만원~10만원<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li class=\"price_selection\"><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(100000, 200000, '10만원~20만원')\">10만원~20만원<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li class=\"price_selection\"><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(200000, 300000, '20만원~30만원')\">20만원~30만원<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li class=\"price_selection\"><a href=\"javascript:void(0)\" class=\"sub_pants_tap_link\" onclick=\"showPriceRange(300000, undefined, '30만원 이상')\">30만원이상<span style=\"display:none;\">(x)</span></a></li>\r\n");
      out.write("	   					<li>\r\n");
      out.write("	   						<div class=\"custom_price_range\">\r\n");
      out.write("							    <input type=\"text\" id=\"minPrice\" placeholder=\"최소\">\r\n");
      out.write("							    ~\r\n");
      out.write("							    <input type=\"text\" id=\"maxPrice\" placeholder=\"최대\">\r\n");
      out.write("							    <button onclick=\"applyCustomPriceRange()\">검색</button>\r\n");
      out.write("							</div>\r\n");
      out.write("	   					</li>\r\n");
      out.write("	   				</ul>\r\n");
      out.write("	   			</dd>\r\n");
      out.write("	   		</dl>\r\n");
      out.write("	   </div>\r\n");
      out.write("	   \r\n");
      out.write("	   <!-- 클릭한 값 표시 -->\r\n");
      out.write("	   \r\n");
      out.write("	   <div id=\"userSelectionDisplay\" style=\"padding: 20px; margin-top: 40px;\">\r\n");
      out.write("		    선택한 항목이 여기에 표시됩니다.\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<!-- 상품 리스트 위의 선택 버튼 -->\r\n");
      out.write("   \r\n");
      out.write("   <div class=\"sorter_box\">\r\n");
      out.write("	  <ul class=\"sorter_list\">\r\n");
      out.write("	    <li><button class=\"sorter_button\" onclick=\"sortItems('highToLow', this)\">높은 가격순</button></li>\r\n");
      out.write("	    <li><button class=\"sorter_button\" onclick=\"sortItems('lowToHigh', this)\">낮은 가격순</button></li>\r\n");
      out.write("	    <li><button class=\"sorter_button\" onclick=\"sortItems('reviews', this)\">리뷰 순</button></li>\r\n");
      out.write("	    <li><button class=\"sorter_button\" onclick=\"sortItems('starScore', this)\">별점 순</button></li>\r\n");
      out.write("	  </ul>\r\n");
      out.write("	  \r\n");
      out.write("    <!-- 페이지 버튼 -->	  \r\n");
      out.write("	  <!-- 페이지 버튼 -->\r\n");
      out.write("		<div class=\"pagination\">\r\n");
      out.write("		\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("   \r\n");
      out.write("   <!-- 브랜드 상품 리스트 구역 -->\r\n");
      out.write("  \r\n");
      out.write("	 <div class=\"productsGrid\">\r\n");
      out.write("	  ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    window.onload = function() {\r\n");
      out.write("        // 브랜드 이름 처리\r\n");
      out.write("        var brandNames = document.querySelectorAll('.allItemInfo p');\r\n");
      out.write("        brandNames.forEach(function(brandName) {\r\n");
      out.write("            if (brandName.innerText.length > 15) {\r\n");
      out.write("                brandName.innerText = brandName.innerText.substring(0, 15) + \"...\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 제품 이름 처리\r\n");
      out.write("        var productNames = document.querySelectorAll('.allItemInfo h3');\r\n");
      out.write("        productNames.forEach(function(productName) {\r\n");
      out.write("            if (productName.innerText.length > 15) {\r\n");
      out.write("                productName.innerText = productName.innerText.substring(0, 15) + \"...\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/brand/brandList.jsp(9,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/brand/brandList.jsp(9,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/brand/brandList.jsp(9,0) '${pageContext.request.contextPath }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f1_reused = false;
    try {
      _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f1.setParent(null);
      // /WEB-INF/views/brand/brandList.jsp(18,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setVar("brandImage");
      // /WEB-INF/views/brand/brandList.jsp(18,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/brand/brandList.jsp(18,0) '${brandListMap.brandImage }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${brandListMap.brandImage }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
      if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      _jspx_th_c_005fset_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f2 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f2_reused = false;
    try {
      _jspx_th_c_005fset_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f2.setParent(null);
      // /WEB-INF/views/brand/brandList.jsp(19,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setVar("brandProduct");
      // /WEB-INF/views/brand/brandList.jsp(19,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/brand/brandList.jsp(19,0) '${brandListMap.allBrandProductDTO }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${brandListMap.allBrandProductDTO }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f2 = _jspx_th_c_005fset_005f2.doStartTag();
      if (_jspx_th_c_005fset_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f2);
      _jspx_th_c_005fset_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f3 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f3_reused = false;
    try {
      _jspx_th_c_005fset_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f3.setParent(null);
      // /WEB-INF/views/brand/brandList.jsp(20,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f3.setVar("brandProductImage");
      // /WEB-INF/views/brand/brandList.jsp(20,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f3.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/brand/brandList.jsp(20,0) '${brandListMap.allBrandProductImageList }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${brandListMap.allBrandProductImageList }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f3 = _jspx_th_c_005fset_005f3.doStartTag();
      if (_jspx_th_c_005fset_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f3);
      _jspx_th_c_005fset_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/brand/brandList.jsp(643,3) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("brandAllProduct");
      // /WEB-INF/views/brand/brandList.jsp(643,3) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/brand/brandList.jsp(643,3) '${brandProduct}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${brandProduct}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/brand/brandList.jsp(643,3) name = varStatus type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVarStatus("status");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("	    <div class=\"allItemInfo\" data-category=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-subcategory=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.subCategory}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write("	     data-color1=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.color1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-color2=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.color2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-color3=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.color3}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-price=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.price }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write("	     data-viewCount=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.viewCount }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-reviewCount=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.reviewCount }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-starScore=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.averageStarScore }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" id=\"brandAllProduct");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.index + 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("	        <a href=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/product/detailProduct.do?productNo=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.productNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("	            <img src=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/download.do?imageFileName=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandProductImage[status.index].imageFileName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("&productNo=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.productNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("&path=product\" id=\"preview");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.index + 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("	            <h4>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.brand}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</h4>\r\n");
            out.write("	            <p>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</p>\r\n");
            out.write("	            ");
            if (_jspx_meth_fmt_005fformatNumber_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("	            <span class=\"product-price\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${formattedPrice}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("원</span>\r\n");
            out.write("	            <div class=\"stars-background\">\r\n");
            out.write("				    <div class=\"star-rating\">\r\n");
            out.write("				        <div class=\"filled-stars\" style=\"width: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.averageStarScore / 5 * 100}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("%;\">★★★★★</div>\r\n");
            out.write("				        <div class=\"empty-stars\">★★★★★</div>\r\n");
            out.write("				    </div>\r\n");
            out.write("				    <span class=\"review-count\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.reviewCount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</span>\r\n");
            out.write("				</div>\r\n");
            out.write("	            ");
            out.write("\r\n");
            out.write("	        </a>\r\n");
            out.write("	    </div>\r\n");
            out.write("	  ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatNumber_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:formatNumber
    org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag _jspx_th_fmt_005fformatNumber_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag) _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvar_005fvalue_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag.class);
    boolean _jspx_th_fmt_005fformatNumber_005f0_reused = false;
    try {
      _jspx_th_fmt_005fformatNumber_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatNumber_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/views/brand/brandList.jsp(651,13) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatNumber_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${brandAllProduct.price}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/brand/brandList.jsp(651,13) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatNumber_005f0.setPattern("#,##0");
      // /WEB-INF/views/brand/brandList.jsp(651,13) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatNumber_005f0.setVar("formattedPrice");
      int _jspx_eval_fmt_005fformatNumber_005f0 = _jspx_th_fmt_005fformatNumber_005f0.doStartTag();
      if (_jspx_th_fmt_005fformatNumber_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvar_005fvalue_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatNumber_005f0);
      _jspx_th_fmt_005fformatNumber_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatNumber_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatNumber_005f0_reused);
    }
    return false;
  }
}
